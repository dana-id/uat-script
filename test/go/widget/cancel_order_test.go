// Code generated by Copilot. DO NOT EDIT.
// This file is auto-generated from Widget.json. Update this file if new scenarios are added to the JSON.
package widget_test

import (
	"context"
	"encoding/json"
	"testing"
	"time"

	"uat-script/helper"

	"github.com/google/uuid"
)

const (
	widgetTitleCase = "CancelOrder"
	widgetJsonPath  = "../../../resource/request/components/Widget.json"
)

func generatePartnerReferenceNo() string {
	return uuid.New().String()
}

// CancelOrder
func TestCancelOrderSuccessInProcess(t *testing.T) {
	caseName := "CancelOrderSuccessInProcess"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	result, err := helper.RetryOnInconsistentRequest(func() (interface{}, error) {
		resp, err := helper.ExecuteAPIRequestWithCustomHeaders(ctx, req, "POST", endpoint, resourcePath, nil)
		if err != nil {
			return nil, err
		}
		defer resp.Body.Close()
		var respMap map[string]interface{}
		err = json.NewDecoder(resp.Body).Decode(&respMap)
		if err != nil {
			return nil, err
		}
		respBytes, err := json.Marshal(respMap)
		if err != nil {
			return nil, err
		}
		return string(respBytes), nil
	}, 3, 2*time.Second)
	if err != nil {
		t.Fatalf("API call failed: %v", err)
	}
	err = helper.AssertResponse(widgetJsonPath, widgetTitleCase, caseName, result.(string), map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailUserStatusAbnormal(t *testing.T) {
	caseName := "CancelOrderFailUserStatusAbnormal"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailMerchantStatusAbnormal(t *testing.T) {
	caseName := "CancelOrderFailMerchantStatusAbnormal"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailMissingParameter(t *testing.T) {
	caseName := "CancelOrderFailMissingParameter"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailOrderNotExist(t *testing.T) {
	caseName := "CancelOrderFailOrderNotExist"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailExceedCancelWindowTime(t *testing.T) {
	caseName := "CancelOrderFailExceedCancelWindowTime"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailNotAllowedByAgreement(t *testing.T) {
	caseName := "CancelOrderFailNotAllowedByAgreement"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailAccountStatusAbnormal(t *testing.T) {
	caseName := "CancelOrderFailAccountStatusAbnormal"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailInsufficientMerchantBalance(t *testing.T) {
	caseName := "CancelOrderFailInsufficientMerchantBalance"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailOrderRefunded(t *testing.T) {
	caseName := "CancelOrderFailOrderRefunded"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailInvalidSignature(t *testing.T) {
	caseName := "CancelOrderFailInvalidSignature"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCancelOrderFailTimeout(t *testing.T) {
	caseName := "CancelOrderFailTimeout"
	jsonDict, err := helper.GetRequest(widgetJsonPath, widgetTitleCase, caseName)
	if err != nil {
		t.Fatalf("Failed to get request data: %v", err)
	}
	partnerReferenceNo := generatePartnerReferenceNo()
	jsonDict["originalPartnerReferenceNo"] = partnerReferenceNo
	jsonBytes, err := json.Marshal(jsonDict)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	var req interface{}
	err = json.Unmarshal(jsonBytes, &req)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}
	ctx := context.Background()
	endpoint := "https://api.sandbox.dana.id/widget/v1.0/cancel-order.htm"
	resourcePath := "/widget/v1.0/cancel-order.htm"
	err = helper.ExecuteAndAssertErrorResponse(t, ctx, req, "POST", endpoint, resourcePath, widgetJsonPath, widgetTitleCase, caseName, nil, map[string]interface{}{"originalPartnerReferenceNo": partnerReferenceNo})
	if err != nil {
		t.Fatal(err)
	}
}
